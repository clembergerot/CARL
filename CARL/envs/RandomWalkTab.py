"""Defines a two-armed bandit task where both arms follow a random walk."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/envs/11_RandomWalkTAB.ipynb.

# %% auto 0
__all__ = ['RandomWalkTAB']

# %% ../../nbs/envs/11_RandomWalkTAB.ipynb 5
import numpy as np

# %% ../../nbs/envs/11_RandomWalkTAB.ipynb 6
class RandomWalkTAB(object):
    """
    Class for defining a random-walk two-armed bandit.
    """

    def __init__(self, kappa, sigma, rew, pun):
        self.M = 2    # number of arms
        self.kappa = kappa    # decay parameter
        self.sigma = sigma    # standard deviation
        self.rew = rew   # reward value
        self.pun = pun   # punishment value
        self.probs = np.random.uniform(size=2)    # initialize random probs

    def return_payoffs(self, choices):
        """Returns reward with probability p and punishment with probability
        (1-p), then updates the probabilities according to random walk"""
        payoffs = np.ones((len(choices)))
        probs_ar = np.array(self.probs)  # create array of probs
        choices_li = list(choices)  # create list of choices
        probs_now = probs_ar[choices_li]  # returns prob associated
        # with each choice
        rd = np.random.rand(len(choices))  # returns random numbers
        # between 0 and 1
        mask = rd <= probs_now  # if random number is smaller than prob,
        # arm yields reward
        payoffs[mask] = payoffs[mask] * self.rew  # attribute reward
        payoffs[~mask] = payoffs[~mask] * self.pun  # attribute punishment

        # Update probs according to random walk
        self.probs = self.probs + self.kappa * (0.5 - self.probs) + np.random.normal(loc=0., scale=self.sigma**2, size=2)
        
        return payoffs

    def output_probs(self):
        """Outputs np array of probabilities associated to each option."""
        return np.array(self.probs)
